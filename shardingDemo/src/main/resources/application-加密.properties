# \u6253\u5370SQL
spring.shardingsphere.props.sql-show = true
spring.main.allow-bean-definition-overriding = true

# ----------------\u6570\u636E\u6E90\u914D\u7F6E
# \u6307\u5B9A\u5BF9\u5E94\u7684\u5E93
spring.shardingsphere.datasource.names=m0,m1

spring.shardingsphere.datasource.m0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m0.url=jdbc:mysql://192.168.65.212:3306/shardingdb1?serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m0.username=root
spring.shardingsphere.datasource.m0.password=root

spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://192.168.65.212:3306/shardingdb2?serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=root
#------------------------\u5206\u5E03\u5F0F\u5E8F\u5217\u7B97\u6CD5\u914D\u7F6E
# \u751F\u6210\u5B57\u7B26\u4E32\u7C7B\u578B\u5206\u5E03\u5F0F\u4E3B\u952E\u3002
spring.shardingsphere.rules.sharding.key-generators.user_keygen.type=NANOID
#spring.shardingsphere.rules.sharding.key-generators.user_keygen.type=UUID
# \u6307\u5B9A\u5206\u5E03\u5F0F\u4E3B\u952E\u751F\u6210\u7B56\u7565
spring.shardingsphere.rules.sharding.tables.user.key-generate-strategy.column=userid
spring.shardingsphere.rules.sharding.tables.user.key-generate-strategy.key-generator-name=user_keygen
#-----------------------\u914D\u7F6E\u5B9E\u9645\u5206\u7247\u8282\u70B9
spring.shardingsphere.rules.sharding.tables.user.actual-data-nodes=m$->{0..1}.user_$->{1..2}
# HASH_MOD\u5206\u5E93
spring.shardingsphere.rules.sharding.tables.user.database-strategy.standard.sharding-column=userid
spring.shardingsphere.rules.sharding.tables.user.database-strategy.standard.sharding-algorithm-name=user_db_alg

spring.shardingsphere.rules.sharding.sharding-algorithms.user_db_alg.type=HASH_MOD
spring.shardingsphere.rules.sharding.sharding-algorithms.user_db_alg.props.sharding-count=2
# HASH_MOD\u5206\u8868
spring.shardingsphere.rules.sharding.tables.user.table-strategy.standard.sharding-column=userid
spring.shardingsphere.rules.sharding.tables.user.table-strategy.standard.sharding-algorithm-name=user_tbl_alg

spring.shardingsphere.rules.sharding.sharding-algorithms.user_tbl_alg.type=INLINE
# \u5B57\u7B26\u4E32\u7C7B\u578B\u8981\u5148hashcode\u8F6C\u4E3Along\uFF0C\u518D\u53D6\u6A21\u3002\u4F46\u662FGrovvy\u7684 "xxx".hashcode%2 \u4E0D\u77E5\u9053\u4E3A\u4EC0\u4E48\u4F1A\u4EA7\u751F -1,0,1\u4E09\u79CD\u7ED3\u679C
#spring.shardingsphere.rules.sharding.sharding-algorithms.user_tbl_alg.props.algorithm-expression=user_$->{Math.abs(userid.hashCode()%2) +1}
# \u7528\u6237\u4FE1\u606F\u5206\u5230\u56DB\u4E2A\u8868
spring.shardingsphere.rules.sharding.sharding-algorithms.user_tbl_alg.props.algorithm-expression=user_$->{Math.abs(userid.hashCode()%4).intdiv(2) +1}
# \u6570\u636E\u52A0\u5BC6:\u5BF9password\u5B57\u6BB5\u8FDB\u884C\u52A0\u5BC6
# \u5B58\u50A8\u660E\u6587\u7684\u5B57\u6BB5
spring.shardingsphere.rules.encrypt.tables.user.columns.password.plainColumn = password
# \u5B58\u50A8\u5BC6\u6587\u7684\u5B57\u6BB5
spring.shardingsphere.rules.encrypt.tables.user.columns.password.cipherColumn = password_cipher
# \u52A0\u5BC6\u5668
spring.shardingsphere.rules.encrypt.tables.user.columns.password.encryptorName = user_password_encry
# AES\u52A0\u5BC6\u5668
#spring.shardingsphere.rules.encrypt.encryptors.user_password_encry.type=AES
#spring.shardingsphere.rules.encrypt.encryptors.user_password_encry.props.aes-key-value=123456
# MD5\u52A0\u5BC6\u5668
#spring.shardingsphere.rules.encrypt.encryptors.user_password_encry.type=MD5
# SM3\u52A0\u5BC6\u5668
spring.shardingsphere.rules.encrypt.encryptors.user_password_encry.type=SM3
spring.shardingsphere.rules.encrypt.encryptors.user_password_encry.props.sm3-salt=12345678

# sm4\u52A0\u5BC6\u5668
#spring.shardingsphere.rules.encrypt.encryptors.user_password_encry.type=SM4