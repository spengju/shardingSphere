# \u6253\u5370SQL
spring.shardingsphere.props.sql-show = true
spring.main.allow-bean-definition-overriding = true

# ----------------\u6570\u636E\u6E90\u914D\u7F6E
# \u6307\u5B9A\u5BF9\u5E94\u7684\u5E93
spring.shardingsphere.datasource.names=m0,m1

spring.shardingsphere.datasource.m0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m0.url=jdbc:mysql://192.168.65.212:3306/shardingdb1?serverTimezone=UTC
spring.shardingsphere.datasource.m0.username=root
spring.shardingsphere.datasource.m0.password=root

spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://192.168.65.212:3306/shardingdb2?serverTimezone=UTC
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=root
#------------------------\u5206\u5E03\u5F0F\u5E8F\u5217\u7B97\u6CD5\u914D\u7F6E
# \u751F\u6210\u5B57\u7B26\u4E32\u7C7B\u578B\u5206\u5E03\u5F0F\u4E3B\u952E\u3002
spring.shardingsphere.rules.sharding.key-generators.user_keygen.type=NANOID
#spring.shardingsphere.rules.sharding.key-generators.user_keygen.type=UUID
# \u6307\u5B9A\u5206\u5E03\u5F0F\u4E3B\u952E\u751F\u6210\u7B56\u7565
spring.shardingsphere.rules.sharding.tables.user.key-generate-strategy.column=userid
spring.shardingsphere.rules.sharding.tables.user.key-generate-strategy.key-generator-name=user_keygen
#-----------------------\u914D\u7F6E\u8BFB\u5199\u5206\u79BB
# \u8981\u914D\u7F6E\u6210\u8BFB\u5199\u5206\u79BB\u7684\u865A\u62DF\u5E93
spring.shardingsphere.rules.sharding.tables.user.actual-data-nodes=userdb.user
# \u914D\u7F6E\u8BFB\u5199\u5206\u79BB\u865A\u62DF\u5E93 \u4E3B\u5E93\u4E00\u4E2A\uFF0C\u4ECE\u5E93\u591A\u4E2A
spring.shardingsphere.rules.readwrite-splitting.data-sources.userdb.static-strategy.write-data-source-name=m0
spring.shardingsphere.rules.readwrite-splitting.data-sources.userdb.static-strategy.read-data-source-names[0]=m1
# \u6307\u5B9A\u8D1F\u8F7D\u5747\u8861\u5668
spring.shardingsphere.rules.readwrite-splitting.data-sources.userdb.load-balancer-name=user_lb
# \u914D\u7F6E\u8D1F\u8F7D\u5747\u8861\u5668
# \u6309\u64CD\u4F5C\u8F6E\u8BAD
spring.shardingsphere.rules.readwrite-splitting.load-balancers.user_lb.type=ROUND_ROBIN
# \u6309\u4E8B\u52A1\u8F6E\u8BAD
#spring.shardingsphere.rules.readwrite-splitting.load-balancers.user_lb.type=TRANSACTION_ROUND_ROBIN
# \u6309\u64CD\u4F5C\u968F\u673A
#spring.shardingsphere.rules.readwrite-splitting.load-balancers.user_lb.type=RANDOM
# \u6309\u4E8B\u52A1\u968F\u673A
#spring.shardingsphere.rules.readwrite-splitting.load-balancers.user_lb.type=TRANSACTION_RANDOM
# \u8BFB\u8BF7\u6C42\u5168\u90E8\u5F3A\u5236\u8DEF\u7531\u5230\u4E3B\u5E93
#spring.shardingsphere.rules.readwrite-splitting.load-balancers.user_lb.type=FIXED_PRIMARY



